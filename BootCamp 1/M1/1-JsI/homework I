'use strict';

//Determiná que será impreso en la consola, sin ejecutar el código.
//Investiga cuál es la diferencia entre declarar una variable con `var` y directamente asignarle un valor.

```javascript
x = 1;
var a = 5;
var b = 10;
var c = function (a, b, c) {
   var x = 10;
   console.log(x); //10
   console.log(a); //8
   var f = function (a, b, c) {
      b = a;
      console.log(b); //8
      b = c;
      var x = 5;
   };
   f(a, b, c);
   console.log(b); //9 ----> su kay fue creada por la función c y el value iniciado al ejecutarse 11.
};
c(8, 9, 10);
console.log(b); //10 ----> contexto global
console.log(x); //1
```

```javascript
console.log(bar); //undefined
console.log(baz); //is not defined
foo(); //Hola!
function foo() {
   console.log('Hola!'); //Hola!
}
var bar = 1;
baz = 2;
```

```javascript
var instructor = 'Tony';
if (true) {
   var instructor = 'Franco';
}
console.log(instructor); //Franco
```

```javascript
var instructor = 'Tony';
console.log(instructor); //Tony
(function () {
   if (true) {
      var instructor = 'Franco';
      console.log(instructor); //Franco
   }
})();
console.log(instructor); //Tony
```

```javascript
var instructor = 'Tony';
let pm = 'Franco';
if (true) {
   var instructor = 'The Flash';
   let pm = 'Reverse Flash';
   console.log(instructor); //The Flash
   console.log(pm); //Reverse Flash
}
console.log(instructor); //The Flash
console.log(pm); //Franco
```

//¿Cuál crees que será el resultado de la ejecución de estas operaciones?:

```javascript
6 / "3" //2
"2" * "3" //6
4 + 5 + "px" //9px
"$" + 4 + 5 //$45
"4" - 2 //2
"4px" - 2 //NaN
7 / 0 //Infinity
{}[0] //undefined
parseInt("09") //9
5 && 2 //2
2 && 5 //5
5 || 0 //5
0 || 5 //0
[3]+[3]-[10] //"33-10"
3>2>1 //false 
[] == ![] //true
```

// Si te quedó alguna duda repasá con [este artículo](http://javascript.info/tutorial/object-conversion).
//¿Cuál es el output o salida en consola luego de ejecutar este código? Explicar por qué:

```javascript
function test() {
   console.log(a); //undefined
 // en la primera llamada a console.log(a), la variable a todavía no ha sido inicializada y su valor es undefined.
   console.log(foo()); //2 
   //Ya que foo() es una función declarada con una función anidada, su definición también se mueve al comienzo de la función
   var a = 1;
   function foo() {
      return 2;
   }
}

test();
```

//Y el de este código? :

```javascript
var snack = 'Meow Mix';

function getFood(food) {
   if (food) {
      var snack = 'Friskies';
      return snack;
   }
   return snack;
}

getFood(false); //undefined
```

//This
//¿Cuál es el output o salida en consola luego de ejecutar esté código? Explicar por qué:

```javascript
var fullname = 'Juan Perez';
var obj = {
   fullname: 'Natalia Nerea',
   prop: {
      fullname: 'Aurelio De Rosa',
      getFullname: function () {
         return this.fullname; //al usar el this trabajamos con las props o valores que se encuentran 
         //dentro del objeto donde la function (método) se aloja
      },
   },
};

console.log(obj.prop.getFullname()); //'Aurelio de Rosa'
//this.fullname se refiere a la propiedad fullname del objeto prop dentro del objeto obj, que es "Aurelio De Rosa"

var test = obj.prop.getFullname;

console.log(test()); //'Juan Perez'
//dentro de la función test(), this.fullname no se refiere a la propiedad fullname del objeto prop dentro del objeto obj, sino que se refiere a la variable global fullname, que es "Juan Perez"
```

//Event loop
//Considerando el siguiente código, ¿Cuál sería el orden en el que se muestra por consola? ¿Por qué?

```javascript NO LO ENTENDI
function printing() {
   console.log(1); //1
   setTimeout(function () {
      console.log(2); //4
   }, 1000);
   setTimeout(function () {
      console.log(3); //3
   }, 0);
   console.log(4); //2
}

printing();
```
SLIDES
https://docs.google.com/presentation/d/e/2PACX-1vTCAwxrvaldkPlu5z5rIUxRoazsIcylblSqH-9ehgWfgvY3FdlfNDyy0dMmHJi24WWnLUyn-7XFoM8W/pub?start=false&loop=false&delayms=3000&slide=id.g1d6548f8739_0_1